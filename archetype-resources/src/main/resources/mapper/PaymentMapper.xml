<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="${package_name}.mappers.PaymentMapper">
    <sql id="paymentColumns">
        `payment`.`id`,
        `payment`.`user_id`,
        `payment`.`body`,
        `payment`.`detail`,
        `payment`.`amount`,
        `payment`.`status`,
        `payment`.`payment_type`,
        `payment`.`wx_transaction_id`,
        `payment`.`wx_out_trade_no`,
        `payment`.`wx_payment_open_id`,
        `payment`.`message`,
        `payment`.`prepay_time`,
        `payment`.`canceled_time`,
        `payment`.`payment_time`,
        `payment`.`refund_time`,
        `payment`.`created_time`,
        `payment`.`updated_time`
    </sql>

    <sql id="paymentTables">
        `t_payment` `payment`
    </sql>

    <sql id="paymentSearchWhere">
        <if test="request.userId != null">
            AND `payment`.`user_id` = #{request.userId}
        </if>
        <if test="request.body != null and request.body !=''">
            AND `payment`.`body` = #{request.body}
        </if>
        <if test="request.detail != null and request.detail !=''">
            AND `payment`.`detail` = #{request.detail}
        </if>
        <if test="request.amount != null">
            AND `payment`.`amount` = #{request.amount}
        </if>
        <if test="request.status != null">
            AND `payment`.`status` = #{request.status}
        </if>
        <if test="request.paymentType != null">
            AND `payment`.`payment_type` = #{request.paymentType}
        </if>
        <if test="request.wxTransactionId != null and request.wxTransactionId !=''">
            AND `payment`.`wx_transaction_id` = #{request.wxTransactionId}
        </if>
        <if test="request.wxOutTradeNo != null and request.wxOutTradeNo !=''">
            AND `payment`.`wx_out_trade_no` = #{request.wxOutTradeNo}
        </if>
        <if test="request.wxPaymentOpenId != null and request.wxPaymentOpenId !=''">
            AND `payment`.`wx_payment_open_id` = #{request.wxPaymentOpenId}
        </if>
        <if test="request.message != null and request.message !=''">
            AND `payment`.`message` = #{request.message}
        </if>
        <if test="request.prepayTimeFrom != null">
            AND `payment`.`prepay_time` &gt;= #{request.prepayTimeFrom}
        </if>
        <if test="request.prepayTimeTo != null">
            AND `payment`.`prepay_time` &lt;= #{request.prepayTimeTo}
        </if>
        <if test="request.canceledTimeFrom != null">
            AND `payment`.`canceled_time` &gt;= #{request.canceledTimeFrom}
        </if>
        <if test="request.canceledTimeTo != null">
            AND `payment`.`canceled_time` &lt;= #{request.canceledTimeTo}
        </if>
        <if test="request.paymentTimeFrom != null">
            AND `payment`.`payment_time` &gt;= #{request.paymentTimeFrom}
        </if>
        <if test="request.paymentTimeTo != null">
            AND `payment`.`payment_time` &lt;= #{request.paymentTimeTo}
        </if>
        <if test="request.refundTimeFrom != null">
            AND `payment`.`refund_time` &gt;= #{request.refundTimeFrom}
        </if>
        <if test="request.refundTimeTo != null">
            AND `payment`.`refund_time` &lt;= #{request.refundTimeTo}
        </if>
        <if test="request.createdTimeFrom != null">
            AND `payment`.`created_time` &gt;= #{request.createdTimeFrom}
        </if>
        <if test="request.createdTimeTo != null">
            AND `payment`.`created_time` &lt;= #{request.createdTimeTo}
        </if>
        <if test="request.updatedTimeFrom != null">
            AND `payment`.`updated_time` &gt;= #{request.updatedTimeFrom}
        </if>
        <if test="request.updatedTimeTo != null">
            AND `payment`.`updated_time` &lt;= #{request.updatedTimeTo}
        </if>
        AND `payment`.`is_delete` = 0
    </sql>

    <insert id="insertPayment" useGeneratedKeys="true" keyProperty="payment.id">
        INSERT INTO `t_payment`(
        `user_id`,
        `body`,
        `detail`,
        `amount`,
        `status`,
        `payment_type`,
        `wx_transaction_id`,
        `wx_out_trade_no`,
        `wx_payment_open_id`,
        `message`,
        `prepay_time`,
        `canceled_time`,
        `payment_time`,
        `refund_time`,
        `created_time`,
        `updated_time`)
        VALUES(
        #{payment.userId},
        #{payment.body},
        #{payment.detail},
        #{payment.amount},
        #{payment.status},
        #{payment.paymentType},
        #{payment.wxTransactionId},
        #{payment.wxOutTradeNo},
        #{payment.wxPaymentOpenId},
        #{payment.message},
        #{payment.prepayTime},
        #{payment.canceledTime},
        #{payment.paymentTime},
        #{payment.refundTime},
        NOW(),
        NOW())
    </insert>

    <update id="updatePayment">
        UPDATE `t_payment` SET
        `user_id` = #{payment.userId},
        `body` = #{payment.body},
        `detail` = #{payment.detail},
        `amount` = #{payment.amount},
        `status` = #{payment.status},
        `payment_type` = #{payment.paymentType},
        `wx_transaction_id` = #{payment.wxTransactionId},
        `wx_out_trade_no` = #{payment.wxOutTradeNo},
        `wx_payment_open_id` = #{payment.wxPaymentOpenId},
        `message` = #{payment.message},
        `prepay_time` = #{payment.prepayTime},
        `canceled_time` = #{payment.canceledTime},
        `payment_time` = #{payment.paymentTime},
        `refund_time` = #{payment.refundTime},
        `updated_time` = NOW()
        WHERE `id` = #{payment.id}
        AND `is_delete` = 0
    </update>

    <update id="updatePaymentPartly">
        UPDATE `t_payment` SET
        <if test="request.userId != null">
            `user_id` = #{request.userId},
        </if>
        <if test="request.body != null and request.body !=''">
            `body` = #{request.body},
        </if>
        <if test="request.detail != null and request.detail !=''">
            `detail` = #{request.detail},
        </if>
        <if test="request.amount != null">
            `amount` = #{request.amount},
        </if>
        <if test="request.status != null">
            `status` = #{request.status},
        </if>
        <if test="request.paymentType != null">
            `payment_type` = #{request.paymentType},
        </if>
        <if test="request.wxTransactionId != null and request.wxTransactionId !=''">
            `wx_transaction_id` = #{request.wxTransactionId},
        </if>
        <if test="request.wxOutTradeNo != null and request.wxOutTradeNo !=''">
            `wx_out_trade_no` = #{request.wxOutTradeNo},
        </if>
        <if test="request.wxPaymentOpenId != null and request.wxPaymentOpenId !=''">
            `wx_payment_open_id` = #{request.wxPaymentOpenId},
        </if>
        <if test="request.message != null and request.message !=''">
            `message` = #{request.message},
        </if>
        <if test="request.prepayTime != null">
            `prepay_time` = #{request.prepayTime},
        </if>
        <if test="request.canceledTime != null">
            `canceled_time` = #{request.canceledTime},
        </if>
        <if test="request.paymentTime != null">
            `payment_time` = #{request.paymentTime},
        </if>
        <if test="request.refundTime != null">
            `refund_time` = #{request.refundTime},
        </if>
        `updated_time` = NOW()
        WHERE `id` = #{request.id}
        AND `is_delete` = 0
    </update>

    <update id="deletePayment">
        UPDATE `t_payment`
        SET `is_delete` = 1
        <where>
            AND `id` = #{id}
            AND `is_delete` = 0
        </where>
    </update>

    <select id="selectPaymentById" resultType="${package_name}.models.Payment">
        SELECT
        <include refid="paymentColumns"/>
        FROM
        <include refid="paymentTables"/>
        <where>
            AND `payment`.`id` = #{id}
            AND `payment`.`is_delete` = 0
        </where>
        LIMIT 1
    </select>

    <select id="selectPagingPayments" resultType="${package_name}.models.Payment">
        SELECT
        <include refid="paymentColumns"/>
        FROM
        <include refid="paymentTables"/>
        <where>
            <include refid="paymentSearchWhere"/>
        </where>
        <choose>
            <when test="request.sortOrders != null and request.sortOrders.size() != 0">
                ORDER BY
                <foreach collection="request.sortOrders" item="sortOrder" separator=",">
                    $${sortOrder.field} $${sortOrder.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY `payment`.`id` DESC
            </otherwise>
        </choose>
        LIMIT #{request.paging.offset}, #{request.paging.pageSize}
    </select>

    <select id="selectPagingPaymentsCount" resultType="Long">
        SELECT COUNT(*)
        FROM
        <include refid="paymentTables"/>
        <where>
            <include refid="paymentSearchWhere"/>
        </where>
    </select>

    <select id="selectPaymentByWxOutTradeNo" resultType="${package_name}.models.Payment">
        SELECT
        <include refid="paymentColumns"/>
        FROM
        <include refid="paymentTables"/>
        <where>
            AND `payment`.`wx_out_trade_no` = #{wxOutTradeNo}
        </where>
        LIMIT 1
    </select>
</mapper>