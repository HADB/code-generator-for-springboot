<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="${package_name}.mappers.UserRoleMapper">
    <sql id="userRoleColumns">
        `user_role`.`id`,
        `user_role`.`user_id`,
        `user_role`.`role_id`,
        `user_role`.`create_time`,
        `user_role`.`update_time`
    </sql>

    <sql id="userRoleTables">
        `t_user_role` `user_role`
    </sql>

    <sql id="userRoleSearchWhere">
        <if test="request.userId != null">
            AND `user_role`.`user_id` = #{request.userId}
        </if>
        <if test="request.roleId != null">
            AND `user_role`.`role_id` = #{request.roleId}
        </if>
        <if test="request.createTimeFrom != null">
            AND `user_role`.`create_time` &gt;= #{request.createTimeFrom}
        </if>
        <if test="request.createTimeTo != null">
            AND `user_role`.`create_time` &lt;= #{request.createTimeTo}
        </if>
        <if test="request.updateTimeFrom != null">
            AND `user_role`.`update_time` &gt;= #{request.updateTimeFrom}
        </if>
        <if test="request.updateTimeTo != null">
            AND `user_role`.`update_time` &lt;= #{request.updateTimeTo}
        </if>
        AND `user_role`.`is_delete` = 0
    </sql>

    <insert id="insertUserRole" useGeneratedKeys="true" keyProperty="userRole.id">
        INSERT INTO `t_user_role`(
        `user_id`,
        `role_id`,
        `create_time`,
        `update_time`)
        VALUES(
        #{userRole.userId},
        #{userRole.roleId},
        NOW(),
        NOW())
    </insert>

    <update id="updateUserRole">
        UPDATE `t_user_role` SET
        `user_id` = #{userRole.userId},
        `role_id` = #{userRole.roleId},
        `update_time` = NOW()
        WHERE `id` = #{userRole.id}
        AND `is_delete` = 0
    </update>

    <update id="updateUserRolePartly">
        UPDATE `t_user_role` SET
        <if test="request.userId != null">
            `user_id` = #{request.userId},
        </if>
        <if test="request.roleId != null">
            `role_id` = #{request.roleId},
        </if>
        `update_time` = NOW()
        WHERE `id` = #{request.id}
        AND `is_delete` = 0
    </update>

    <update id="deleteUserRole">
        UPDATE `t_user_role`
        SET `is_delete` = 1
        <where>
            AND `id` = #{id}
            AND `is_delete` = 0
        </where>
    </update>

    <select id="selectUserRoleById" resultType="${package_name}.models.UserRole">
        SELECT
        <include refid="userRoleColumns"/>
        FROM
        <include refid="userRoleTables"/>
        <where>
            AND `user_role`.`id` = #{id}
            AND `user_role`.`is_delete` = 0
        </where>
        LIMIT 1
    </select>

    <select id="selectPagingUserRoles" resultType="${package_name}.models.UserRole">
        SELECT
        <include refid="userRoleColumns"/>
        FROM
        <include refid="userRoleTables"/>
        <where>
            <include refid="userRoleSearchWhere"/>
        </where>
        <choose>
            <when test="request.sortOrders != null and request.sortOrders.size() != 0">
                ORDER BY
                <foreach collection="request.sortOrders" item="sortOrder" separator=",">
                    $${sortOrder.field} $${sortOrder.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY `user_role`.`id` DESC
            </otherwise>
        </choose>
        LIMIT #{request.paging.offset}, #{request.paging.pageSize}
    </select>

    <select id="selectUserRolesCount" resultType="Long">
        SELECT COUNT(*)
        FROM
        <include refid="userRoleTables"/>
        <where>
            <include refid="userRoleSearchWhere"/>
        </where>
    </select>
</mapper>
