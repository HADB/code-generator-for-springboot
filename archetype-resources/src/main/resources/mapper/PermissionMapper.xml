<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="${package_name}.mappers.PermissionMapper">
    <sql id="permissionColumns">
        `permission`.`id`,
        `permission`.`key`,
        `permission`.`name`,
        `permission`.`description`,
        `permission`.`type`,
        `permission`.`api_path`,
        `permission`.`api_method`,
        `permission`.`create_time`,
        `permission`.`update_time`
    </sql>

    <sql id="permissionTables">
        `t_permission` `permission`
    </sql>

    <sql id="permissionSearchWhere">
        <if test="request.key != null and request.key !=''">
            AND `permission`.`key` = #{request.key}
        </if>
        <if test="request.name != null and request.name !=''">
            AND `permission`.`name` = #{request.name}
        </if>
        <if test="request.description != null and request.description !=''">
            AND `permission`.`description` = #{request.description}
        </if>
        <if test="request.type != null">
            AND `permission`.`type` = #{request.type}
        </if>
        <if test="request.apiPath != null and request.apiPath !=''">
            AND `permission`.`api_path` = #{request.apiPath}
        </if>
        <if test="request.apiMethod != null and request.apiMethod !=''">
            AND `permission`.`api_method` = #{request.apiMethod}
        </if>
        <if test="request.createTimeFrom != null">
            AND `permission`.`create_time` &gt;= #{request.createTimeFrom}
        </if>
        <if test="request.createTimeTo != null">
            AND `permission`.`create_time` &lt;= #{request.createTimeTo}
        </if>
        <if test="request.updateTimeFrom != null">
            AND `permission`.`update_time` &gt;= #{request.updateTimeFrom}
        </if>
        <if test="request.updateTimeTo != null">
            AND `permission`.`update_time` &lt;= #{request.updateTimeTo}
        </if>
    </sql>

    <insert id="insertPermission" useGeneratedKeys="true" keyProperty="permission.id">
        INSERT INTO `t_permission`(
        `key`,
        `name`,
        `description`,
        `type`,
        `api_path`,
        `api_method`,
        `create_time`,
        `update_time`)
        VALUES(
        #{permission.key},
        #{permission.name},
        #{permission.description},
        #{permission.type},
        #{permission.apiPath},
        #{permission.apiMethod},
        NOW(),
        NOW())
    </insert>

    <update id="updatePermission">
        UPDATE `t_permission` SET
        `key` = #{permission.key},
        `name` = #{permission.name},
        `description` = #{permission.description},
        `type` = #{permission.type},
        `api_path` = #{permission.apiPath},
        `api_method` = #{permission.apiMethod},
        `update_time` = NOW()
        WHERE `id` = #{permission.id}
    </update>

    <update id="updatePermissionPartly">
        UPDATE `t_permission` SET
        <if test="request.key != null and request.key !=''">
            `key` = #{request.key},
        </if>
        <if test="request.name != null and request.name !=''">
            `name` = #{request.name},
        </if>
        <if test="request.description != null and request.description !=''">
            `description` = #{request.description},
        </if>
        <if test="request.type != null">
            `type` = #{request.type},
        </if>
        <if test="request.apiPath != null and request.apiPath !=''">
            `api_path` = #{request.apiPath},
        </if>
        <if test="request.apiMethod != null and request.apiMethod !=''">
            `api_method` = #{request.apiMethod},
        </if>
        `update_time` = NOW()
        WHERE `id` = #{request.id}
    </update>

    <delete id="deletePermission">
        DELETE FROM `t_permission`
        WHERE `id` = #{id}
    </delete>

    <select id="selectPermissionById" resultType="${package_name}.models.Permission">
        SELECT
        <include refid="permissionColumns"/>
        FROM
        <include refid="permissionTables"/>
        WHERE `permission`.`id` = #{id}
        LIMIT 1
    </select>

    <select id="selectPagingPermissions" resultType="${package_name}.models.Permission">
        SELECT
        <include refid="permissionColumns"/>
        FROM
        <include refid="permissionTables"/>
        <where>
            <include refid="permissionSearchWhere"/>
        </where>
        <choose>
            <when test="request.sortOrders != null and request.sortOrders.size() != 0">
                ORDER BY
                <foreach collection="request.sortOrders" item="sortOrder" separator=",">
                    $${sortOrder.field} $${sortOrder.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY `permission`.`id` DESC
            </otherwise>
        </choose>
        LIMIT #{request.paging.offset}, #{request.paging.pageSize}
    </select>

    <select id="selectPermissionsCount" resultType="Long">
        SELECT COUNT(*)
        FROM
        <include refid="permissionTables"/>
        <where>
            <include refid="permissionSearchWhere"/>
        </where>
    </select>

    <select id="selectPermissionsByRoleId" resultType="${package_name}.models.Permission">
        SELECT
        <include refid="permissionColumns"/>
        FROM
        <include refid="permissionTables"/>
        WHERE `permission`.`id` IN (SELECT `permission_id` FROM `t_role_permission` `role_permission` WHERE `role_permission`.`role_id` = #{roleId})
    </select>

    <select id="selectPermissionsByUserId" resultType="${package_name}.models.Permission">
        SELECT
        <include refid="permissionColumns"/>
        FROM
        <include refid="permissionTables"/>
        WHERE `permission`.`id` IN (SELECT `permission_id` FROM `t_role_permission` `role_permission` WHERE `role_permission`.`role_id` IN (SELECT `role_id` FROM `t_user_role` `user_role` WHERE `user_role`.`user_id` = #{userId}))
    </select>

    <select id="selectPermissionByKey" resultType="${package_name}.models.Permission">
        SELECT
        <include refid="permissionColumns"/>
        FROM
        <include refid="permissionTables"/>
        WHERE `permission`.`key` = #{key}
        LIMIT 1
    </select>
</mapper>
