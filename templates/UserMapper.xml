<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="${package_name}.mappers.UserMapper">
    <sql id="userColumnsBasic">
${column_list}
    </sql>

    <sql id="userColumnsPassword">
        `user`.`password`,
        `user`.`salt`
    </sql>

    <sql id="userColumns">
        <include refid="userColumnsBasic"/>
    </sql>

    <sql id="userColumnsWithPassword">
        <include refid="userColumnsBasic"/>,
        <include refid="userColumnsPassword"/>
    </sql>

    <sql id="userTables">
        `t_user` `user`
    </sql>

    <sql id="userSearchWhere">
${search_where}
    </sql>


    <insert id="insertUser" useGeneratedKeys="true" keyProperty="user.id">
        INSERT INTO `t_user`(
${name_list})
        VALUES(
${value_list})
    </insert>

    <update id="updateUser">
        UPDATE `t_user` SET
${update_list}
        WHERE `id` = #{user.id}
        AND `is_delete` = 0
    </update>

    <update id="updateUserPartly">
        UPDATE `t_user` SET
${update_partly_list}
        WHERE `id` = #{request.id}
        AND `is_delete` = 0
    </update>

    <update id="updateUserWechatInfo">
        UPDATE `t_user` SET
        `open_id` = #{user.openId},
        `nickname` = #{user.nickname},
        `avatar_url` = #{user.avatarUrl}
        WHERE `id` = #{user.id}
    </update>

    <update id="updateUserMobile">
        UPDATE `t_user` SET
        `mobile` = #{user.mobile}
        WHERE `id` = #{user.id}
    </update>

    <update id="updateUserOpenId">
        UPDATE `t_user` SET
        `open_id` = #{user.openId}
        WHERE `id` = #{user.id}
    </update>

    <update id="updateUserPassword">
        UPDATE `t_user` SET
        `password` = #{user.password},
        `salt` = #{user.salt}
        WHERE `id` = #{user.id}
    </update>

    <update id="deleteUser">
        UPDATE `t_user` SET
        `mobile` = CONCAT(`mobile`, '-', `id`, '-deleted'),
        `open_id` = CONCAT(`open_id`, '-', `id`, '-deleted'),
        `is_delete` = 1
        <where>
            AND `id` = #{id}
            AND `is_delete` = 0
        </where>
    </update>

    <select id="selectUserById" resultType="${package_name}.models.User">
        SELECT
        <include refid="userColumns"/>
        FROM
        <include refid="userTables"/>
        <where>
            AND `user`.`id` = #{id}
            AND `user`.`is_delete` = 0
        </where>
        LIMIT 1
    </select>

    <select id="selectUserByMobile" resultType="${package_name}.models.User">
        SELECT
        <include refid="userColumns"/>
        FROM
        <include refid="userTables"/>
        <where>
            AND `user`.`mobile` = #{mobile}
            AND `user`.`is_delete` = 0
        </where>
        LIMIT 1
    </select>

    <select id="selectUserByOpenId" resultType="${package_name}.models.User">
        SELECT
        <include refid="userColumns"/>
        FROM
        <include refid="userTables"/>
        <where>
            AND `user`.`open_id` = #{openId}
            AND `user`.`is_delete` = 0
        </where>
        LIMIT 1
    </select>

    <select id="selectPagingUsers" resultType="${package_name}.models.User">
        SELECT
        <include refid="userColumns"/>
        FROM
        <include refid="userTables"/>
        <where>
            <include refid="userSearchWhere"/>
        </where>
        <choose>
            <when test="request.sortOrders != null and request.sortOrders.size() != 0">
                ORDER BY
                <foreach collection="request.sortOrders" item="sortOrder" separator=",">
                    $${sortOrder.field} $${sortOrder.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY `user`.`id` DESC
            </otherwise>
        </choose>
        LIMIT #{request.paging.offset}, #{request.paging.pageSize}
    </select>

    <select id="selectUsersCount" resultType="Long">
        SELECT COUNT(*)
        FROM
        <include refid="userTables"/>
        <where>
            <include refid="userSearchWhere"/>
        </where>
    </select>

    <select id="selectUserByUsername" resultType="${package_name}.models.User">
        SELECT
        <include refid="userColumnsWithPassword"/>
        FROM
        <include refid="userTables"/>
        <where>
            AND `user`.`username` = #{username}
            AND `user`.`is_delete` = 0
        </where>
        LIMIT 1
    </select>
</mapper>
